#include <iostream>
using namespace std;
int BinarySearch(int *a, const int x, const int left, const int right);
int main(){
	int arr[] = {4,5,9,10,11,12,15,17,23,25,28,30};
	int val = sizeof(arr)/sizeof(int);
	int find;
	
	cout << "인자 수 : " << val << "개" << endl;
	for(int a=0 ; a<val ; a++)cout << arr[a] << " ";
	cout << endl << endl;
	
	cout << "찾으실 숫자는? ";
	cin >> find;
	cout << endl; 
	
	if(BinarySearch(arr, find, 0, val-1)<0)cout << "그 숫자는 없습니다." << endl; 
	else cout << find << "는 " << BinarySearch(arr, find, 0, val-1)+1 << "번째에 있습니다." << endl;
	
	return 0;
}
int BinarySearch(int *a, const int x, const int left, const int right){
	if(left <= right){
		int middle = (left + right) / 2;
		if(x < a[middle])return BinarySearch(a, x, left, middle-1);
		else if(x > a[middle])return BinarySearch(a, x, middle+1, right);
		return middle;
	}
	return -1;
}

BinarySearch()는 배열 중의 특정한 값이 몇번째에 있는지 알려주는 함수다.
배열과 찾아야 할 값, 배열상에서 찾을 범위의 길이를 입력받아 찾아야 할 값의 인덱스 번호를 출력하고,
만일 찾는 값이 배열 상에 없으면 -1을 출력한다. 이 함수를 순환시켜 반복적으로 작업하게 하였다.

left는 찾을 범위의 첫번째 번호, right는 찾을 범위의 마지막 번호, middle은 찾을 범위의 중간의 번호다.
만일 찾을 값이 배열 중간의 값보다 적으면 right를 중간 바로 전으로 설정하여 찾는 범위를 이등분한다.
반대로 찾을 값이 배열 중간의 값보다 많으면 left를 중간 바로 뒤로 설정하여 찾는 범위를 이등분한다.
만약 찾아야 할 값이 middle의 값과 일치하면 값을 찾은 게 되니 순환은 끝난다.
이 과정을 반복해가면서 범위를 줄이다보면 결국 middle은 x를 가리키게 되어 순환이 끝난다.
만약 x가 배열 상에 없다면 가장 위의 if문으로 인해 left와 right가 역전되어 -1을 출력하고 끝나버린다.